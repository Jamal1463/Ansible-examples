---
- name: Play for php app with loadbalance
  hosts: all
  vars:
    db:
      user: root
      database: userdb
      password: redhat
      server: serverd.lab.example.com
      backupfile: userdb.backup
    backend_server_ip:
      - 172.25.250.11
      - 172.25.250.12
    db_pkg:
      - mariadb
      - mariadb-server
      - MySQL-python
    httpd_pkg: 
      - httpd
      - php
      - php-mysql
    haproxy_pkg:
      - haproxy
    httpd_srv: httpd
    db_srv: mariadb
    haproxy_srv: haproxy

  handlers:
    - name: restart_httpd
      service:
        name: httpd
        state: restarted

    - name: restart_haproxy
      service:
        name: haproxy
        state: restarted
  tasks:
  # Installation of packages based on inventory groupss
    - name: Install Firewalld
      yum:
        name: firewalld
        state: latest

    - name: Install httpd 
      yum:
        name: "{{ item }}"
        state: latest
      when: inventory_hostname in groups['backend']
      with_items: 
        - "{{ httpd_pkg }}"

    - name: Install haproxy
      yum: 
        name: "{{ item  }}"
        state: latest
      when: inventory_hostname in groups['haproxy']
      with_items:
        - "{{ haproxy_pkg }}"
     
    - name: Install mysql
      yum: 
        name: "{{ item  }}"
        state: latest
      when: inventory_hostname in groups['db']
      with_items:
        - "{{ db_pkg }}"

  # Copy configuration files

    - name: Copy php program file
      template:
        src: index.j2
        dest: /var/www/html/index.php
      when: inventory_hostname in groups['backend']
      notify:
        - restart_httpd

    - name: Copy haproxy template
      template:
        src: haproxy.j2
        dest: /etc/haproxy/haproxy.cfg
      when: inventory_hostname in groups['haproxy']
      notify:
        - restart_haproxy

    # Starting servies based on inventory groupss 
    - name: Start httpd 
      service:
        name: "{{ httpd_srv }}"
        enabled: true
        state: started
      when: inventory_hostname in groups['backend']

    - name: Start haproxy 
      service:
        name: "{{ haproxy_srv }}"
        enabled: true
        state: started
      when: inventory_hostname in groups['haproxy']
     
    - name: Start mysql 
      service:
        name: "{{ db_srv }}"
        enabled: true
        state: started
      when: inventory_hostname in groups['db']



  # Open firewalld port
    - name: Open httpd port
      firewalld:
        service: http
        state: enabled
        immediate: true
        permanent: true
      when: inventory_hostname in groups['backend']

    - name: Open haproxy port
      firewalld:
        service: http
        state: enabled
        immediate: true
        permanent: true
      when: inventory_hostname in groups['haproxy']

    - name: Open haproxy statistics port
      firewalld:
        port: 5000/tcp
        state: enabled
        immediate: true
        permanent: true
      when: inventory_hostname in groups['haproxy']

    - name: Open mysql port
      firewalld:
        service: mysql
        state: enabled
        immediate: true
        permanent: true
      when: inventory_hostname in groups['db']

  # enable selinux boolean for apache backend server to connect with db
    - name: enable selinux boolean
      seboolean:
        name: "{{ item }}"
        state: yes
        persistent: yes
      with_items:
        - httpd_can_network_connect_db
        - httpd_can_network_connect
      when: inventory_hostname in groups['backend']

  # Configuring Mariadb server
    - name: Setting up mariadb password 
      mysql_user:
        name: "{{ db['user'] }}"
        password: "{{ db['password'] }}"
#        login_password: redhat
      when: inventory_hostname in groups['db']

    - name: DB users have privileges on all databases
      mysql_user:
        name: "{{ db['user']}}"
        priv: "*.*:ALL"
        append_privs: yes
        password: "{{ db['password']}}"
        login_password: "{{ db['password']}}"
        host: "{{ item }}"
      when: inventory_hostname in groups['db']
      with_items:
        - 'serverd.lab.example.com'
        - '%'

    - name: Copy database dump file
      copy:
        src: "{{ db['backupfile']}}"
        dest: /tmp
      when: inventory_hostname in groups['db']

    - name: Restore database
      mysql_db:
        name: "{{ db['database'] }}"
        state: import
        target: "/tmp/{{ db['backupfile'] }}"
        login_password: "{{ db['password']}}"

      when: inventory_hostname in groups['db']
 

